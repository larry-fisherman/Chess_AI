
"""Handles user input and displaying current game-state"""

import pygame as p
import ChessEngine
import ChessAI
import sys
from multiprocessing import Process, Queue

board_width = board_height = 512  # The width and height can be adjusted depending on resolution of game pieces
dimension = 8
sq_size = board_height // dimension
max_fps = 15  # The FPS only comes into play when we are doing an animation
images = {}


def load_images():
    """Only loading images one time, initializing a global dictionary"""
    pieces = ['wP', 'wR', 'wN', 'wB', 'wQ', 'wK', 'bP', 'bR', 'bN', 'bB', 'bQ', 'bK']
    for piece in pieces:
        images[piece] = p.transform.scale(p.image.load('Images/' + piece + '.png'), (sq_size, sq_size))
        """Can access a piece/image by saying 'images['wP']"""


def main():
    """Main driver handles user input"""
    p.init()
    screen = p.display.set_mode((board_width, board_height))  # Display the board on the screen
    clock = p.time.Clock()
    screen.fill(p.Color('white'))
    game_state = ChessEngine.GameState()
    valid_moves = game_state.get_valid_moves()
    move_made = False  # Set so we can know when to regenerate valid moves
    animate = False  # When a piece 
    load_images()
    running = True
    sq_selected = ()  # Keeps track of the last clicked item (row, col)
    player_clicks = []
    game_over = False  # Set to false so can display game-ending text when game is done
    ai_thinking = False
    move_undone = False
    move_finder_process = None
    player_one = True  # If a human is playing then this will be true. If it is an AI then it is False
    player_two = False  # True = human, False = AI

    """Grabs all of the events that happen while the game is running"""
    while running:
        human_turn = (game_state.white_to_move and player_one) or (not game_state.white_to_move and player_two)
        for e in p.event.get():
            if e.type == p.QUIT:
                p.quit()
                sys.exit()
            elif e.type == p.MOUSEBUTTONDOWN:
                if not game_over:
                    location = p.mouse.get_pos()  # Location of mouse on screen
                    """Find the specific square mouse is on"""
                    col = location[0] // sq_size
                    row = location[1] // sq_size
                    if sq_selected == (row, col) or col >= 8:  # Unselect a square already clicked on by clearing clicks
                        sq_selected = ()
                        player_clicks = []
                    else:
                        sq_selected = (row, col)  # Hold the square selected in (row, col)
                        player_clicks.append(sq_selected)
                    if len(player_clicks) == 2 and human_turn:  # Move the piece between the two selected squares
                        move = ChessEngine.Move(player_clicks[0], player_clicks[1], game_state.board)

                        """This makes the move accepted from the computers list not players so en passant is followed"""
                        for i in range(len(valid_moves)):
                            if move == valid_moves[i]:
                                game_state.make_move(valid_moves[i])
                                move_made = True
                                animate = True
                                sq_selected = ()  # This will reset their clicks so they can go again later
                                player_clicks = []
                        if not move_made:
                            player_clicks = [sq_selected]

            elif e.type == p.KEYDOWN:
                if e.key == p.K_u:  # Undo move
                    game_state.undo_move()
                    move_made = True
                    animate = False
                    game_over = False
                    if ai_thinking:
                        move_finder_process.terminate()
                        ai_thinking = False
                    move_undone = True
                if e.key == p.K_r:  # Reset game to original game state
                    game_state = ChessEngine.GameState()
                    valid_moves = game_state.get_valid_moves()
                    sq_selected = ()
                    player_clicks = []
                    move_made = False
                    animate = False
                    game_over = False
                    if ai_thinking:
                        move_finder_process.terminate()
                        ai_thinking = False
                    move_undone = True

        if not game_over and not human_turn and not move_undone:
            if not ai_thinking:
                ai_thinking = True
                return_queue = Queue()
                move_finder_process = Process(target=ChessAI.find_best_move, args=(game_state, valid_moves, return_queue))
                move_finder_process.start()  # Uses Nega-Max Alpha-Beta
            if not move_finder_process.is_alive():
                ai_move = return_queue.get()
                if ai_move is None:  # If AI can't find a move it will move a piece at random
                    ai_move = ChessAI.find_random_move(valid_moves)
                game_state.make_move(ai_move)
                move_made = True
                animate = True
                ai_thinking = False

        if move_made:
            if animate:
                animate_move(game_state.move_log[-1], screen, game_state.board, clock)
            valid_moves = game_state.get_valid_moves()
            move_made = False
            animate = False
            move_undone = False

        draw_game_state(screen, game_state, valid_moves, sq_selected)

        if game_state.checkmate:  # Draws game ending text
            game_over = True
            if game_state.white_to_move:  # AI wins
                draw_text(screen, 'Black wins by checkmate')
            else:  # Human wins
                draw_text(screen, 'White wins by checkmate')

        elif game_state.stalemate:
            game_over = True
            draw_text(screen, 'Stalemate')

        clock.tick(max_fps)
        p.display.flip()


def highlight_squares(screen, gs, valid_moves, sq_selected):
    """When a square is selected it is highlighted"""
    if sq_selected != ():
        row, col = sq_selected
        if gs.board[row][col][0] == ('w' if gs.white_to_move else 'b'):
            s = p.Surface((sq_size, sq_size))
            s.set_alpha(100)  # Transparency value
            s.fill(p.Color('blue'))
            screen.blit(s, (col * sq_size, row * sq_size))
            s.fill(p.Color('yellow'))
            for move in valid_moves:  # Highlights the squares that can be moved to
                if move.start_row == row and move.start_col == col:
                    screen.blit(s, (sq_size*move.end_col, sq_size*move.end_row))


def draw_game_state(screen, game_state, valid_moves, sq_selected):
    """Draws game board for the current game state"""
    draw_board(screen)
    highlight_squares(screen, game_state, valid_moves, sq_selected)
    draw_pieces(screen, game_state.board)


def draw_board(screen):
    """Draw checkered board"""
    global colors
    colors = [p.Color('white'), p.Color('gray')]
    for r in range(dimension):
        for c in range(dimension):
            color = colors[((r + c) % 2)]
            p.draw.rect(screen, color, p.Rect(c * sq_size, r * sq_size, sq_size, sq_size))


def draw_pieces(screen, board):
    """Draw pieces on board"""
    for r in range(dimension):
        for c in range(dimension):
            piece = board[r][c]
            if piece != '--':
                screen.blit(images[piece], p.Rect(c * sq_size, r * sq_size, sq_size, sq_size))
    """Want to call draw board before draw pieces because we want the squares below the pieces"""


# def drawMoveLog(screen, game_state, font):
#     move_log_rect = p.Rect(board_width, 0, move_log_width, move_log_height)
#     p.draw.rect(screen, p.Color('black'), move_log_rect)
#     move_log = game_state.move_log
#     move_texts = []
#     for i in range(0, len(move_log), 2):
#         move_string = str(i // 2 + 1) + '. ' + str(move_log[i]) + ' '
#         if i + 1 < len(move_log):
#             move_string += str(move_log[i + 1]) + ' '
#         move_texts.append(move_string)
#
#     moves_per_row = 3
#     text_y = 5
#     padding = 5
#     line_spacing = 2
#     for i in range(0, len(move_texts), moves_per_row):
#         text = ''
#         for j in range(moves_per_row):
#             if i + j < len(move_texts):
#                 text += move_texts[i + j]
#
#         text_object = font.render(text, True, p.Color('blue'))
#         text_location = move_log_rect.move(padding, text_y)
#         screen.blit(text_object, text_location)
#         text_y += text_object.get_height() + line_spacing


def animate_move(move, screen, board, clock):
    """Animate the movement of the piece moving squares"""
    global colors
    d_row = move.end_row - move.start_row  # Distance piece is moving
    d_col = move.end_col - move.start_col
    frames_per_square = 10
    frame_count = (abs(d_row) + abs(d_col)) * frames_per_square
    for frame in range(frame_count + 1):
        row, col = (move.start_row + d_row * frame / frame_count, move.start_col + d_col * frame / frame_count)
        draw_board(screen)  # Keep re-drawing screen and the pieces on top of that
        draw_pieces(screen, board)
        color = colors[(move.end_row + move.end_col) % 2]  # Makes it so every other square is the same color
        end_square = p.Rect(move.end_col*sq_size, move.end_row*sq_size, sq_size, sq_size)
        p.draw.rect(screen, color, end_square)

        if move.piece_captured != '--':
            if move.enpassant_move:
                enpassant_row = move.end_row + 1 if move.piece_captured[0] == 'b' else move.end_row - 1
                end_square = p.Rect(move.end_col * sq_size, enpassant_row * sq_size, sq_size, sq_size)
            screen.blit(images[move.piece_captured], end_square)
        screen.blit(images[move.piece_moved], p.Rect(col * sq_size, row * sq_size, sq_size, sq_size))
        p.display.flip()
        clock.tick(60)


def draw_text(screen, text):
    """Draws game ending text"""
    font = p.font.SysFont('Helvetica', 32, True, False)
    text_object = font.render(text, False, p.Color('gray'))
    text_location = p.Rect(0, 0, board_width, board_height).move(board_width / 2 - text_object.get_width() / 2,
                                                                 board_height / 2 - text_object.get_height() / 2)
    screen.blit(text_object, text_location)
    text_object = font.render(text, False, p.Color('black'))  # Draw it twice so it is easier to see
    screen.blit(text_object, text_location.move(2, 2))


if __name__ == '__main__':
    main()

