
"""Chess engine holds all the information about the current state of the game"""


class GameState:
    def __init__(self):
        """Board is 8x8 2d list and each spot is represented by two characters(color,piece)"""
        self.board = [
            ['bR', 'bN', 'bB', 'bQ', 'bK', 'bB', 'bN', 'bR'],
            ['bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP'],
            ['--', '--', '--', '--', '--', '--', '--', '--'],
            ['--', '--', '--', '--', '--', '--', '--', '--'],
            ['--', '--', '--', '--', '--', '--', '--', '--'],
            ['--', '--', '--', '--', '--', '--', '--', '--'],
            ['wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP'],
            ['wR', 'wN', 'wB', 'wQ', 'wK', 'wB', 'wN', 'wR']]

        """List of different pieces that can be moved"""
        self.moveFunctions = {'P': self.get_pawn_moves, 'R': self.get_rook_moves, 'N': self.get_knight_moves,
                              'B': self.get_bishop_moves, 'Q': self.get_queen_moves, 'K': self.get_king_moves}

        self.white_to_move = True
        self.move_log = []  # List of moves made so we can undo later
        self.white_king_location = (7, 4)  # Initial king location for white
        self.black_king_location = (0, 4)  # Initial king location for black
        self.checkmate = False
        self.stalemate = False
        self.in_check = False
        self.pins = []  # Spaces around king that are occupied by ally pieces
        self.checks = []  # Spaces king is under check
        self.enpassant_possible = ()
        self.enpassant_possible_log = [self.enpassant_possible]

        """Four things to check to see if castling is possible for four different directions - white king side, 
        white queen side, black king side, black queen side"""
        self.current_castling_rights = CastleRights(True, True, True, True)
        self.castle_rights_log = [CastleRights(self.current_castling_rights.wks, self.current_castling_rights.bks,
                                               self.current_castling_rights.wqs, self.current_castling_rights.bqs)]

    def make_move(self, move):
        self.board[move.start_row][move.start_col] = '--'
        self.board[move.end_row][move.end_col] = move.piece_moved
        self.move_log.append(move)  # Displays history of moves in case you want to go back
        self.white_to_move = not self.white_to_move  # Swap turns

        if move.piece_moved == 'wK':  # Update white king's location
            self.white_king_location = (move.end_row, move.end_col)
        elif move.piece_moved == 'bK':  # Update black king's location
            self.black_king_location = (move.end_row, move.end_col)

        """Pawn makes it to opposing back row it is promoted to a queen"""
        if move.pawn_promotion:
            self.board[move.end_row][move.end_col] = move.piece_moved[0] + 'Q'

        if move.enpassant_move:
            self.board[move.start_row][move.end_col] = '--'

        if move.piece_moved[1] == 'P' and abs(move.start_row - move.end_row) == 2:
            self.enpassant_possible = ((move.start_row + move.end_row) // 2, move.start_col)
        else:
            self.enpassant_possible = ()
        self.enpassant_possible_log.append(self.enpassant_possible)

        """Move the king to the correct location if castle has taken place"""
        if move.castle_move:
            if move.end_col - move.start_col == 2:  # Castle is king side
                self.board[move.end_row][move.end_col - 1] = self.board[move.end_row][move.end_col + 1]
                self.board[move.end_row][move.end_col + 1] = '--'
            else:  # Castle is queen side
                self.board[move.end_row][move.end_col + 1] = self.board[move.end_row][move.end_col - 2]
                self.board[move.end_row][move.end_col - 2] = '--'
        self.update_castle_rights(move)
        self.castle_rights_log.append(CastleRights(self.current_castling_rights.wks, self.current_castling_rights.bks,
                                                   self.current_castling_rights.wqs, self.current_castling_rights.bqs))

    def undo_move(self):
        """Undo a move that has been done"""
        if len(self.move_log) != 0:  # Make sure there is a move that can be undone
            move = self.move_log.pop()  # Grab the last move from the move log
            self.board[move.start_row][move.start_col] = move.piece_moved
            self.board[move.end_row][move.end_col] = move.piece_captured
            self.white_to_move = not self.white_to_move

            if move.piece_moved == 'wK':  # Update white king's location to previous position
                self.white_king_location = (move.start_row, move.start_col)
            elif move.piece_moved == 'bK':  # Update black king's location to previous position
                self.black_king_location = (move.start_row, move.start_col)

            if move.enpassant_move:
                self.board[move.end_row][move.end_col] = '--'
                self.board[move.start_row][move.end_col] = move.piece_captured
            self.enpassant_possible_log.pop()
            self.enpassant_possible = self.enpassant_possible_log[-1]

            """Get rid of new castle rights from the move we are undoing and set the current castle rights"""
            self.castle_rights_log.pop()
            self.current_castling_rights = self.castle_rights_log[-1]
            if move.castle_move:
                if move.end_col - move.start_col == 2:
                    self.board[move.end_row][move.end_col + 1] = self.board[move.end_row][move.end_col - 1]
                    self.board[move.end_row][move.end_col - 1] = '--'
                else:
                    self.board[move.end_row][move.end_col - 2] = self.board[move.end_row][move.end_col + 1]
                    self.board[move.end_row][move.end_col + 1] = '--'

            """Reset check mate and stale mate"""
            self.checkmate = False
            self.stalemate = False

    def update_castle_rights(self, move):
        """Checking the conditions to complete a castle"""
        if move.piece_captured == 'wR':  # White rook has been captured
            if move.end_col == 0:
                self.current_castling_rights.wqs = False
            elif move.end_col == 7:
                self.current_castling_rights.wks = False
        elif move.piece_captured == 'bR':  # Black rook has been captured
            if move.end_col == 0:
                self.current_castling_rights.bqs = False
            elif move.end_col == 7:
                self.current_castling_rights.bks = False

        if move.piece_moved == 'wK':  # White king has moved
            self.current_castling_rights.wks = False
            self.current_castling_rights.wqs = False
        elif move.piece_moved == 'bK':  # Black king has moved
            self.current_castling_rights.bks = False
            self.current_castling_rights.bqs = False
        elif move.piece_moved == 'wR':  # White rook has moved
            if move.start_row == 7:
                if move.start_col == 0:
                    self.current_castling_rights.wqs = False
                elif move.start_col == 7:
                    self.current_castling_rights.wks = False
        elif move.piece_moved == 'bR':  # Black rook has moved
            if move.start_row == 0:
                if move.start_col == 0:
                    self.current_castling_rights.bqs = False
                elif move.start_col == 7:
                    self.current_castling_rights.bks = False

    def get_valid_moves(self):
        """All legal moves including checks"""
        temp_castle_rights = CastleRights(self.current_castling_rights.wks, self.current_castling_rights.bks,
                                          self.current_castling_rights.wqs, self.current_castling_rights.bqs)
        moves = []  # Holds all the possible moves
        self.in_check, self.pins, self.checks = self.check_for_pins_and_checks()

        """Check the king location to make sure it's not in Check"""
        if self.white_to_move:
            king_row = self.white_king_location[0]
            king_col = self.white_king_location[1]
        else:
            king_row = self.black_king_location[0]
            king_col = self.black_king_location[1]

        if self.in_check:
            if len(self.checks) == 1:
                moves = self.get_all_possible_moves()
                check = self.checks[0]
                check_row = check[0]
                check_col = check[1]
                piece_checking = self.board[check_row][check_col]
                valid_squares = []
                if piece_checking[1] == 'N':  # knight is only piece that can jump ally pieces, so different check
                    valid_squares = [(check_row, check_col)]
                else:
                    for i in range(1, 8):
                        valid_sq = (king_row + check[2] * i, king_col + check[3] * i)
                        valid_squares.append(valid_sq)
                        if valid_sq[0] == check_row and valid_sq[1] == check_col:
                            break
                """Doesn't allow king to move into check"""
                for i in range(len(moves) - 1, -1, -1):
                    if moves[i].piece_moved[1] != 'K':
                        if not (moves[i].end_row, moves[i].end_col) in valid_squares:
                            moves.remove(moves[i])
            else:
                self.get_king_moves(king_row, king_col, moves)
        else:
            moves = self.get_all_possible_moves()
            if self.white_to_move:
                self.get_castle_moves(self.white_king_location[0], self.white_king_location[1], moves)
            else:
                self.get_castle_moves(self.black_king_location[0], self.black_king_location[1], moves)

        """If no moves are possible then player is either in check or stale mate"""
        if len(moves) == 0:
            if self.in_check():
                self.checkmate = True
            else:
                self.stalemate = True

        self.current_castling_rights = temp_castle_rights

        return moves

    def in_check(self):
        """Determines if player is in check"""
        if self.white_to_move:
            return self.square_under_attack(self.white_king_location[0], self.white_king_location[1])
        else:
            return self.square_under_attack(self.black_king_location[0], self.black_king_location[1])

    def square_under_attack(self, row, col):
        """Determines if enemy can attack the square (row, column)"""
        self.white_to_move = not self.white_to_move  # Switch POV to opponent
        opponent_moves = self.get_all_possible_moves()  # Get all of the opponents moves
        self.white_to_move = not self.white_to_move  # Switch POV back
        for move in opponent_moves:  # Now iterate through moves and see if it matches anything in your opponent's moves
            if move.end_row == row and move.end_col == col:
                return True
        return False

    def get_all_possible_moves(self):
        """All moves possible so we can see if there are any other pieces that affect legal moves"""
        moves = []
        for row in range(len(self.board)):
            for col in range(len(self.board[row])):
                turn = self.board[row][col][0]
                if (turn == 'w' and self.white_to_move) or (turn == 'b' and not self.white_to_move):
                    piece = self.board[row][col][1]
                    self.moveFunctions[piece](row, col, moves)  # Calls the appropriate move function
        return moves

    def check_for_pins_and_checks(self):
        """Checking for the players around the king"""
        pins = []
        checks = []
        in_check = False
        if self.white_to_move:
            enemy_color = 'b'
            ally_color = 'w'
            start_row = self.white_king_location[0]
            start_col = self.white_king_location[1]
        else:
            enemy_color = 'w'
            ally_color = 'b'
            start_row = self.black_king_location[0]
            start_col = self.black_king_location[1]

        directions = ((-1, 0), (0, -1), (1, 0), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1))  # Moves Kings can make
        for j in range(len(directions)):
            direction = directions[j]
            possible_pin = ()
            for i in range(1, 8):
                end_row = start_row + direction[0] * i
                end_col = start_col + direction[1] * i
                if 0 <= end_row <= 7 and 0 <= end_col <= 7:  # Make sure that it stays on the board
                    end_piece = self.board[end_row][end_col]
                    if end_piece[0] == ally_color and end_piece[1] != 'K':  # Check squares around king for allies
                        if possible_pin == ():
                            possible_pin = (end_row, end_col, direction[0], direction[1])
                        else:
                            break
                    elif end_piece[0] == enemy_color:  # Check for pieces around king that are opponent pieces
                        enemy_type = end_piece[1]
                        if (0 <= j <= 3 and enemy_type == 'R') or (4 <= j <= 7 and enemy_type == 'B') or (
                                i == 1 and enemy_type == 'P' and (
                                (enemy_color == 'w' and 6 <= j <= 7) or (enemy_color == 'b' and 4 <= j <= 5))) or (
                                enemy_type == 'Q') or (i == 1 and enemy_type == 'K'):
                            if possible_pin == ():
                                in_check = True
                                checks.append((end_row, end_col, direction[0], direction[1]))
                                break
                            else:
                                pins.append(possible_pin)
                                break
                else:
                    break
        knight_moves = ((-2, 1), (-2, -1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))
        for move in knight_moves:  # knights are the only piece that can jump allies
            end_row = start_row + move[0]
            end_col = start_col + move[1]
            if 0 <= end_row <= 7 and 0 <= end_col <= 7:
                end_piece = self.board[end_row][end_col]
                if end_piece[0] == enemy_color and end_piece[1] == 'N':
                    in_check = True
                    checks.append((end_row, end_col, move[0], move[1]))
        return in_check, pins, checks

    def get_pawn_moves(self, row, col, moves):
        """Possible moves for pawn"""
        piece_pinned = False
        pin_direction = ()
        for i in range(len(self.pins) - 1, -1, -1):  # Check if pawn can move or if it is pinned
            if self.pins[i][0] == row and self.pins[i][1] == col:
                piece_pinned = True
                pin_direction = (self.pins[i][2], self.pins[i][3])
                self.pins.remove(self.pins[i])
                break

        if self.white_to_move:
            move_amount = -1  # Negative because white is moving up the board
            start_row = 6
            enemy_color = 'b'
            king_row, king_col = self.white_king_location
        else:
            move_amount = 1  # Black pawns are moving down the board - increasing row number
            start_row = 1
            enemy_color = 'w'
            king_row, king_col = self.black_king_location

        """Add move to the possible moves for pawn if it is not pinned"""
        if self.board[row + move_amount][col] == '--':
            if not piece_pinned or pin_direction == (move_amount, 0):
                moves.append(Move((row, col), (row + move_amount, col), self.board))
                if row == start_row and self.board[row + 2 * move_amount][col] == '--':
                    moves.append(Move((row, col), (row + 2 * move_amount, col), self.board))

        if col-1 >= 0:  # Captures to the left
            if not piece_pinned or pin_direction == (move_amount, -1):  # +1 because captures to the right decrease col
                if self.board[row + move_amount][col - 1][0] == enemy_color:
                    moves.append(Move((row, col), (row + move_amount, col - 1), self.board))
                if (row + move_amount, col - 1) == self.enpassant_possible:
                    attacking_piece = blocking_piece = False
                    if king_row == row:
                        if king_col < col:
                            inside_range = range(king_col + 1, col - 1)
                            outside_range = range(col + 1, 8)
                        else:
                            inside_range = range(king_col - 1, col, -1)
                            outside_range = range(col - 2, -1, -1)
                        for i in inside_range:
                            if self.board[row][i] != '--':
                                blocking_piece = True
                        for i in outside_range:
                            square = self.board[row][i]
                            if square[0] == enemy_color and (square[1] == 'R' or square[1] == 'Q'):
                                attacking_piece = True
                            elif square != '--':
                                blocking_piece = True
                    if not attacking_piece or blocking_piece:
                        moves.append(Move((row, col), (row + move_amount, col - 1), self.board, enpassant_move=True))

        if col+1 <= 7:  # Captures to the right
            if not piece_pinned or pin_direction == (move_amount, +1):  # +1 because captures to the right increase col
                if self.board[row + move_amount][col + 1][0] == enemy_color:
                    moves.append(Move((row, col), (row + move_amount, col + 1), self.board))
                if (row + move_amount, col + 1) == self.enpassant_possible:
                    attacking_piece = blocking_piece = False
                    if king_row == row:
                        if king_col < col:
                            inside_range = range(king_col + 1, col)
                            outside_range = range(col + 2, 8)
                        else:
                            inside_range = range(king_col - 1, col + 1, -1)
                            outside_range = range(col - 1, -1, -1)
                        for i in inside_range:
                            if self.board[row][i] != '--':
                                blocking_piece = True
                        for i in outside_range:
                            square = self.board[row][i]
                            if square[0] == enemy_color and (square[1] == 'R' or square[1] == 'Q'):
                                attacking_piece = True
                            elif square != '--':
                                blocking_piece = True
                    if not attacking_piece or blocking_piece:
                        moves.append(Move((row, col), (row + move_amount, col + 1), self.board, enpassant_move=True))

    def get_rook_moves(self, row, col, moves):
        """Possible moves for Rook"""
        piece_pinned = False
        pin_direction = ()
        for i in range(len(self.pins) - 1, -1, -1):
            if self.pins[i][0] == self.pins[i][1] == col:
                piece_pinned = True
                pin_direction = (self.pins[i][2], self.pins[i][3])
                if self.board[row][col][1] != 'Q':
                    self.pins.remove(self.pins[i])
                break

        directions = ((-1, 0), (0, -1), (1, 0), (0, 1))
        enemy_color = 'b' if self.white_to_move else 'w'
        for d in directions:
            for i in range(1, 8):  # Iterate through the number of squares the rook can move, starting with only 1
                end_row = row + d[0] * i
                end_col = col + d[1] * i
                if 0 <= end_row <= 7 and 0 <= end_col <= 7:
                    if not piece_pinned or pin_direction == d or pin_direction == (-d[0], -d[1]):
                        end_piece = self.board[end_row][end_col]
                        if end_piece == '--':
                            moves.append(Move((row, col), (end_row, end_col), self.board))
                        elif end_piece[0] == enemy_color:
                            moves.append(Move((row, col), (end_row, end_col), self.board))
                            break
                        else:
                            break
                else:
                    break

    def get_knight_moves(self, row, col, moves):
        """Possible moves for knight"""
        piece_pinned = False
        for i in range(len(self.pins) - 1, -1, -1):
            if self.pins[i][0] == self.pins[i][1] == col:
                piece_pinned = True
                self.pins.remove(self.pins[i])
                break

        directions = ((-2, 1), (-2, -1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))
        ally_color = 'w' if self.white_to_move else 'b'
        for i in directions:
            end_row = row + i[0]  # Add the rows of the move to the row the piece is currently on
            end_col = col + i[1]  # Add the columns of the move to the column the piece is currently on
            if 0 <= end_row <= 7 and 0 <= end_col <= 7:
                if not piece_pinned:
                    end_piece = self.board[end_row][end_col]
                    if end_piece[0] != ally_color:
                        moves.append(Move((row, col), (end_row, end_col), self.board))

    def get_bishop_moves(self, row, col, moves):
        """Possible moves for bishop"""
        piece_pinned = False
        pin_direction = ()
        for i in range(len(self.pins) - 1, -1, -1):
            if self.pins[i][0] == row and self.pins[i][1] == col:
                piece_pinned = True
                pin_direction = (self.pins[i][2], self.pins[i][3])
                self.pins.remove(self.pins[i])
                break

        directions = ((-1, -1), (1, -1), (1, 1), (-1, 1))
        enemy_color = 'b' if self.white_to_move else 'w'
        for d in directions:
            for i in range(1, 8):  # Iterate through the number of squares the bishop can move, starting with only 1
                end_row = row + d[0] * i
                end_col = col + d[1] * i
                if 0 <= end_row <= 7 and 0 <= end_col <= 7:
                    if not piece_pinned or pin_direction == d or pin_direction == (-d[0], -d[1]):
                        end_piece = self.board[end_row][end_col]
                        if end_piece == '--':
                            moves.append(Move((row, col), (end_row, end_col), self.board))
                        elif end_piece[0] == enemy_color:
                            moves.append(Move((row, col), (end_row, end_col), self.board))
                            break
                        else:
                            break
                else:
                    break

    def get_queen_moves(self, row, col, moves):  # Queen has all the same moves as a rook and bishop put together
        """Possible moves for queen"""
        self.get_rook_moves(row, col, moves)
        self.get_bishop_moves(row, col, moves)

    def get_king_moves(self, row, col, moves):
        """Possible moves for king"""
        row_moves = (-1, -1, -1, 0, 0, 1, 1, 1)  # Easier to separate rows and cols because of all the directions
        col_moves = (-1, 0, 1, -1, 1, -1, 0, 1)
        ally_color = 'w' if self.white_to_move else 'b'
        for i in range(8):
            end_row = row + row_moves[i]
            end_col = col + col_moves[i]
            if 0 <= end_row < 8 and 0 <= end_col < 8:
                end_piece = self.board[end_row][end_col]
                if end_piece[0] != ally_color:
                    if ally_color == 'w':
                        self.white_king_location = (end_row, end_col)
                    else:
                        self.black_king_location = (end_row, end_col)
                    in_check, pins, checks = self.check_for_pins_and_checks()
                    if not in_check:
                        moves.append(Move((row, col), (end_row, end_col), self.board))
                    if ally_color == 'w':
                        self.white_king_location = (row, col)
                    else:
                        self.black_king_location = (row, col)

    def get_castle_moves(self, r, c, moves):
        """Calls the appropriate castling move (i.e. king side castle)"""
        if self.square_under_attack(r, c):  # Can't castle if king is under attack
            return
        if (self.white_to_move and self.current_castling_rights.wks) or \
                (not self.white_to_move and self.current_castling_rights.bks):
            self.get_king_side_castle_moves(r, c, moves)
        if (self.white_to_move and self.current_castling_rights.wqs) or \
                (not self.white_to_move and self.current_castling_rights.bqs):
            self.get_queen_side_castle_moves(r, c, moves)

    def get_king_side_castle_moves(self, r, c, moves):
        """King side castle"""
        if self.board[r][c+1] == '--' and self.board[r][c+2] == '--':  # Check if both squares are empty
            if not self.square_under_attack(r, c + 1) and not self.square_under_attack(r, c + 2):
                moves.append(Move((r, c), (r, c+2), self.board, castle_move=True))

    def get_queen_side_castle_moves(self, r, c, moves):  # Have to check if all three squares between them are empty
        """Queen side castle"""
        if self.board[r][c-2] == '--' and self.board[r][c-1] == '--' and self.board[r][c-3] == '--' and \
                not self.square_under_attack(r, c - 1) and not self.square_under_attack(r, c - 2):
            moves.append(Move((r, c), (r, c-2), self.board, castle_move=True))


class CastleRights:
    def __init__(self, wks, bks, wqs, bqs):
        self.wks = wks
        self.bks = bks
        self.wqs = wqs
        self.bqs = bqs


class Move:
    """Turn computer coords into chess notation"""
    ranks_to_rows = {'1': 7, '2': 6, '3': 5, '4': 4, '5': 3, '6': 2, '7': 1, '8': 0}
    rows_to_ranks = {v: k for k, v in ranks_to_rows.items()}  # This reverses what is written above
    files_to_cols = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7}
    cols_to_files = {v: k for k, v in files_to_cols.items()}

    def __init__(self, start_sq, end_sq, board, enpassant_move=False, castle_move=False):
        """Used for the movement of pieces"""
        self.start_row = start_sq[0]
        self.start_col = start_sq[1]
        self.end_row = end_sq[0]
        self.end_col = end_sq[1]
        self.piece_moved = board[self.start_row][self.start_col]
        self.piece_captured = board[self.end_row][self.end_col]

        self.enpassant_move = enpassant_move
        if self.enpassant_move:
            self.piece_captured = 'wP' if self.piece_moved == 'bP' else 'bP'

        self.castle_move = castle_move

        self.pawn_promotion = (self.piece_moved == 'wP' and self.end_row == 0) or \
                              (self.piece_moved == 'bP' and self.end_row == 7)

        self.is_capture = self.piece_captured != '--'
        self.moveID = self.start_row * 1000 + self.start_col * 100 + self.end_row * 10 + self.end_col

    def __eq__(self, other):
        """Return in the terminal the move ID created directly above"""
        if isinstance(other, Move):
            return self.moveID == other.moveID
        return False

    def get_chess_notation(self):
        if self.pawn_promotion:
            return self.get_rank_file(self.end_row, self.end_col) + 'Q'
        if self.castle_move:
            if self.end_col == 1:
                return '0-0-0'
            else:
                return '0-0'
        if self.enpassant_move:
            return self.get_rank_file(self.start_row, self.start_col)[0] + 'x' + self.get_rank_file(self.end_row,
                                                                                                    self.end_col) + \
                   ' e.p.'
        if self.piece_captured != '--':  # Piece captures an opponent
            if self.piece_moved[1] == 'P':  # Pawn captures another piece
                return self.get_rank_file(self.start_row, self.start_col)[0] + 'x' + self.get_rank_file(self.end_row,
                                                                                                        self.end_col)
            else:  # Any piece besides pawn captures piece
                return self.piece_moved[1] + 'x' + self.get_rank_file(self.end_row, self.end_col)
        else:  # Piece moves to an empty spot
            if self.piece_moved[1] == 'P':  # Piece moved is pawn
                return self.get_rank_file(self.end_row, self.end_col)
            else:
                return self.piece_moved[1] + self.get_rank_file(self.end_row, self.end_col)

    def get_rank_file(self, row, col):
        """Turns the coords into chess squares"""
        return self.cols_to_files[col] + self.rows_to_ranks[row]

    def __str__(self):
        if self.castle_move:
            return '0-0' if self.end_col == 6 else '0-0-0'
        end_sq = self.get_rank_file(self.end_row, self.end_col)

        if self.piece_moved[1] == 'P':
            if self.is_capture:
                return self.cols_to_files[self.start_col] + 'x' + end_sq
            else:
                return end_sq + 'Q' if self.pawn_promotion else end_sq

        move_string = self.piece_moved[1]
        if self.is_capture:
            move_string += 'x'
        return move_string + end_sq

